#!/bin/bash

source $CYGNUS_HOME/tools/funcs.bash    # source common functions

declare BUILD_MODE=debug

OPTION['--clean']="value:bool,eval:BUILD_MODE=clean,help:clean generated files"
OPTION['--coverage']="value:bool,eval:BUILD_MODE=coverage,help:create coverage build"
OPTION['--debug']="value:bool,eval:BUILD_MODE=debug,help:create debug build"
OPTION['--force']="value:bool,help:forcefully remake"
OPTION['--memory']="value:bool,eval:BUILD_MODE=memory,help:use lint tool along with compilation"
OPTION['--perf']="value:bool,eval:BUILD_MODE=perf;BUILD_MODE=perf,help:create performance build"
OPTION['--release']="value:bool,eval:BUILD_MODE=release,help:create release build"
OPTION['--sanitize']="value:bool,eval:BUILD_MODE=sanitize,help:create sanitized build"
OPTION['--strict']="value:bool,eval:STRICT=yes,help:use strict options for compilation"

MAKE() {
    {
    mkdir -p reports/warnings
    if [[ ${VALUES['--force']} ]]; then
        make clean
    fi

    if [[ ${VALUES['--strict']} ]]; then
        make -q && make clean
        make MODE=$1 STRICT=yes 2> reports/warnings/${BUILD_MODE}-errors
    else
        make MODE=$1 2> reports/warnings/${BUILD_MODE}-errors
    fi

    if [[ -s reports/warnings/${BUILD_MODE}-errors ]]; then
        echo -e "\e[1;31mERRORS:\e[m"
        cat reports/warnings/${BUILD_MODE}-errors
    fi
    
    errors=`grep -c "error:|warning:" reports/warnings/${BUILD_MODE}-errors`
    if [[ $errors -gt 0 ]]; then
        echo "Errors|Warnings: $errors"
        return 1;
    fi
    } | tee logs/cybuild-${BUILD_MODE}.log
}

main() {
    parseCmdLine $@
    case $BUILD_MODE in
        clean)
            make clean
            ;;
        coverage)
            MAKE coverage
            ;;
        debug)
            MAKE debug
            ;;
        memory)
            MAKE memory
            ;;
        perf)
            MAKE perf
            ;;
        release)
            MAKE release
            ;;
        sanitize)
            MAKE sanitize
            ;;
        *)
            MAKE debug
            ;;
    esac
    return $?
}

mkdir -p logs
main $@
return $?
