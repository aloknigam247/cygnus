#!/bin/bash

source $CYGNUS_HOME/tools/funcs.bash    # source common functions

declare BUILD_MODE
declare OPT_MODE=debug
declare MAKE_TARGET

OPTION['--clean']="value:bool,eval:MAKE_TARGET=clean,help:clean generated files"
OPTION['--coverage']="value:bool,eval:OPT_MODE=coverage,help:create coverage build"
OPTION['--debug']="value:bool,eval:OPT_MODE=debug,help:create debug build"
OPTION['--memory']="value:bool,eval:OPT_MODE=memory,help:use lint tool along with compilation"
OPTION['--lint']="value:bool,eval:BUILD_MODE=lint,help:use lint tool along with compilation"
OPTION['--perf']="value:bool,eval:OPT_MODE=perf;BUILD_MODE=perf,help:create performance build"
OPTION['--release']="value:bool,eval:OPT_MODE=release,help:create release build"
OPTION['--sanitize']="value:bool,eval:BUILD_MODE=sanitize,help:create sanitized build"
OPTION['--strict']="value:bool,eval:BUILD_MODE=strict,help:use strict options for compilation"

MAKE() {
    make MODE=$OPT_MODE $@
}

memoryBuild() {
    MAKE
}

lintRun() {
    mkdir -p reports/lint
    MAKE -q && MAKE clean
    scan-build-8 --status-bugs -stats -o reports/lint make MODE=$OPT_MODE STRICT=yes CPP_FLAGS=-Werror
}

perfBuild() {
    MAKE
}

perfBuild() {
    MAKE
}

strictBuild() {
    mkdir -p reports/warnings
    MAKE -q && MAKE clean
    MAKE STRICT=yes 2>reports/warnings/warns
    warning_num=`grep -c "warning:" reports/warnings/warns`
    echo "Warnings: $warning_num"
    if [[ $warning_num -gt 0 ]]; then
        return 1;
    fi
    
}

main() {
    parseCmdLine $@
    case $BUILD_MODE in # TODO: need to revisit this section
        memory)
            memoryBuild
            ;;
        lint)
            lintRun
            ;;
        perf)
            perfBuild
            ;;
        sanitize)
            sanitizeBuild
            ;;
        strict)
            strictBuild
            ;;
        *)
            MAKE $MAKE_TARGET
            ;;
    esac
}

main $@
