#!/bin/bash

source $CYGNUS_HOME/tools/funcs.bash    # source common functions

declare -a valid_list
declare -a valid_tests

# DEFAULTS
TEST_DIR='.'
declare OUT_DIR='test_run'
declare TEST_MODE=''
declare HAVE_UNIT=0
declare HAVE_FUNC=0

OPTION['-a']='value:bool,with:-d,help:run all testcases in this directory'
OPTION['-d']='value:string,metavar:dir,help:test case directory'
OPTION['-f']='value:bool,with:-d,without:-a,help:run unit tests only'
OPTION['-o']='value:string,metavar:dir,help:output directory of test run'
OPTION['-u']='value:bool,with:-d,without:-a,help:run functional tests only'
OPTION['--coverage']='value:bool,eval:TEST_MODE=coverage,help:run coverage tests'
OPTION['--mem-check']='value:bool,eval:TEST_MODE=mem-check,help:run mem-check tests'
OPTION['--perf']='value:bool,eval:TEST_MODE=perf,help:run mem-check tests'
OPTION['--sanitize']='value:bool,eval:TEST_MODE=sanitize,help:run sanitization tests'
OPTION['POS']='dest:test_list,count:0+'

validateTests() {
    if [[ ${VALUES["-a"]} ]]; then
        if [[ ${VALUES["test_list"]} ]]; then
            LOG I "-a is given, ignoring ${VALUES["test_list"]}"
        fi
        test -d $TEST_DIR && cd $TEST_DIR
        valid_tests=`find -type f -path "./unit*.cyt" -o -path "./func*.cyt" | sed 's|^./||'`
        cd - > /dev/null
        if [[ -z $valid_tests ]]; then
            LOG W "no testcases found in directory: $TEST_DIR"
            EXIT
        fi
    elif [[ ${VALUES["-f"]} ]]; then
        if [[ ${VALUES["test_list"]} ]]; then
            LOG I "-f is given, ignoring ${VALUES["test_list"]}"
        fi
        test -d $TEST_DIR && cd $TEST_DIR
        valid_tests=`find -type f -path "./func*.cyt" | sed 's|^./||'`
        cd - > /dev/null
        if [[ -z $valid_tests ]]; then
            LOG W "no testcases found in directory: $TEST_DIR"
            EXIT
        fi
    elif [[ ${VALUES["-u"]} ]]; then
        if [[ ${VALUES["test_list"]} ]]; then
            LOG I "-u is given, ignoring ${VALUES["test_list"]}"
        fi
        test -d $TEST_DIR && cd $TEST_DIR
        valid_tests=`find -type f -path "./unit*.cyt" | sed 's|^./||'`
        cd - > /dev/null
        if [[ -z $valid_tests ]]; then
            LOG W "no testcases found in directory: $TEST_DIR"
            EXIT
        fi
    else
        for test in ${VALUES["test_list"]}; do
            if [[ $test =~ unit.*\.cyt || $test =~ func.*\.cyt && -a $TEST_DIR/$test ]]; then
                valid_tests+=" $test"
            else
                LOG W "[invalid testcase] $test"
                continue
            fi
        done
        if [[ -z $valid_tests ]]; then
          LOG E "testcases missing"
          EXIT
        fi
    fi
}

makeRunDir(){
    local testcase=$1
    local test_out=$OUT_DIR/`dirname $testcase`
    rm -rf $test_out
    mkdir -p $test_out
    ln -rs $TEST_DIR/`dirname $testcase`/* $test_out/
}

runFuncTest() {
    local testcase=$1
    local testcase_dir=`dirname $testcase`

    echo "|TESTCASE| $testcase"
    makeRunDir $testcase
    cd $OUT_DIR/$testcase_dir
    
    source `basename $testcase`
    for i in ${!CASE[@]}; do
        echo "|CASE $((i+1))| $(echo ${CASE[$i]} | sed "s|$CYGNUS|cygnus|")"
        ${tool} ${CASE[$i]} | sed 's/.*/>   &/'
        echo
    done
    
    #if [[ $TEST_MODE == "perf" ]]; then
    #    diff gmon.out gmon.gold
    #    if [[ $? -ne 0 ]]; then
    #        echo "TESTFAIL" > testfail
    #    fi
    #fi
}

runUnitTest() {
    local testcase=$1
    local testcase_dir=`dirname $testcase`
    local run_log=$OUT_DIR/$testcase_dir/unit_test.log
    #run_log_color=$OUT_DIR/$testcase_dir/.run.log

    echo "|TESTCASE| $testcase"
    pwd

    makeRunDir $testcase
    {
        LOG I "Run directory created"
#        if [[ ! -a $TEST_DIR/$testcase_dir/Makefile ]]; then
            gen-make -d $OUT_DIR/$testcase_dir -i $CYGNUS_HOME/include -i $CYGNUS_HOME/include/utils -i $CYGNUS_HOME/src/tcc -i $CYGNUS_HOME/tests/utils/include -s $CYGNUS_HOME/src -s $CYGNUS_HOME/tests/utils/src test.cpp
#        fi
        if [[ $? -ne 0 ]]; then
            EXIT 1
        fi
        make --no-print-directory -C $OUT_DIR/$testcase_dir $TEST_MODE 2>&1 | tee $OUT_DIR/$testcase_dir/make.log
        #sed 's|\x1b\[[;0-9]*m\x1b\[K||g' $OUT_DIR/$testcase_dir/make.log.color > $OUT_DIR/$testcase_dir/make.log
        cd $OUT_DIR/$testcase_dir
        echo "[CMD] $tool ./test"
        $tool ./test 2>&1 | tee run.log
        status=$?
        if [[ $TEST_MODE == "perf" ]]; then
            diff gmon.out gmon.gold
            if [[ $? -ne 0 ]]; then
                echo "TESTFAIL" > testfail
            fi
        fi
    } 2>&1 | tee $run_log
    cat $run_log >> reports/unit/unit_test.log
    #sed 's|\x1b\[[;0-9]*m\x1b\[K||g' $run_log_color > $run_log
    [[ $status -eq 0 ]] && echo " --PASS--" || echo " --FAIL--"
}

runTest() {
    if [[ $1 =~ 'func' ]]; then
        HAVE_FUNC=1
        runFuncTest $1
    else
        HAVE_UNIT=1
        runUnitTest $1
    fi
}

main() {
    parseCmdLine $@
    TEST_DIR=${VALUES['-d']:-$TEST_DIR}
    OUT_DIR=${VALUES['-o']:-$OUT_DIR} 
    echo "TEST_DIR: $TEST_DIR"
    echo "OUT_DIR : $OUT_DIR"

    test -d $TEST_DIR || LOG E "directory \`$TEST_DIR' does not exit"
    if [[ $test_out == $OUT_DIR ]]; then
        LOG E "test directory and out directory cannot be same"
        EXIT
    fi
    validateTests

    tc_cnt=0
    for test in $valid_tests; do
        tc_cnt=$((tc_cnt + 1))
    done
    echo -e "\nGenerated Testcase: $tc_cnt\n"

    case $TEST_MODE in
        coverage)
            CYGNUS=$CYGNUS_HOME/build/bin/coverage/cygnus-coverage
            OUT_DIR="$OUT_DIR/coverage"
            mkdir -p reports/coverage
            ;;
        mem-check)
            CYGNUS=$CYGNUS_HOME/build/bin/memory/cygnus-memory
            OUT_DIR="$OUT_DIR/mem-check"
            mkdir -p reports/mem-check
            tool="valgrind --leak-check=full --log-file=valgrind.out"
            ;;
        perf)
            CYGNUS=$CYGNUS_HOME/build/bin/perf/cygnus-perf
            OUT_DIR="$OUT_DIR/perf"
            mkdir -p reports/perf
            ;;
        sanitize)
            CYGNUS=$CYGNUS_HOME/build/bin/sanitize/cygnus-sanitize
            OUT_DIR="$OUT_DIR/sanitize"
            mkdir -p reports/sanitize
            ;;
        *)
            CYGNUS=$CYGNUS_HOME/build/bin/cygnus
            ;;
    esac

    if [[ ${VALUES['-a']} || ${VALUES['-f']} ]] && [[ ! -x $CYGNUS ]]; then
        LOG E "$CYGNUS does not exist"
        EXIT
    fi
    rm -rf reports/func reports/unit
    mkdir -p reports/func reports/unit
    for test in $valid_tests; do
        cd $CYGNUS_HOME
        runTest $test
        cd $CYGNUS_HOME
    done

    case $TEST_MODE in
        coverage)
            if [[ $HAVE_FUNC -eq 1 ]]; then
                mkdir -p reports/coverage/func
                lcov --gcov-tool=gcov-7 -b src -c -d build/obj/coverage -d include --no-external -o reports/coverage/func/coverage.info -q 2> /dev/null
                genhtml reports/coverage/func/coverage.info --output-directory reports/coverage/func/html --demangle-cpp > reports/coverage/func/genhtml.log 2> /dev/null
                echo "Functional Coverage:"
                egrep -A 1 "  lines\.\.\.\.\.\.: " reports/coverage/func/genhtml.log
            fi
            if [[ $HAVE_UNIT -eq 1 ]]; then
                mkdir -p reports/coverage/unit
                lcov --gcov-tool=gcov-7 -b src -c -d $OUT_DIR -d include --no-external -o reports/coverage/unit/coverage.info -q 2> /dev/null
                genhtml --ignore-errors source reports/coverage/unit/coverage.info --output-directory reports/coverage/unit/html --demangle-cpp | tee reports/coverage/unit/genhtml.log 2> /dev/null
            fi
            if [[ ${VALUES['-a']} ]]; then
                mkdir -p reports/coverage/comp
                lcov --gcov-tool=gcov-7 -b src -c -d build/obj/coverage -d $OUT_DIR -d include --no-external -o reports/coverage/comp/coverage.info -q 2> /dev/null
                genhtml --ignore-errors source reports/coverage/comp/coverage.info --output-directory reports/coverage/comp/html --demangle-cpp | tee reports/coverage/comp/genhtml.log 2> /dev/null
            fi
            ;;
        mem-check)
            rm -rf reports/mem-check
            if [[ ${VALUES['-a']} || ${VALUES['-f']} ]]; then
                mkdir -p reports/mem-check/func
                find $OUT_DIR/func -name "valgrind.out" | xargs egrep "[0-9]+ errors" >> reports/mem-check/func/errors
            fi
            if [[ ${VALUES['-a']} || ${VALUES['-u']} ]]; then
                mkdir -p reports/mem-check/unit
                find $OUT_DIR/unit -name "valgrind.out" | xargs egrep "[0-9]+ errors" >> reports/mem-check/unit/errors
            fi
            ;;
        perf)
            # TODO: collect reports
            tool=gprof
            ;;
        *)
    esac
    return 0
}

main $@

