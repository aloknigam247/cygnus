#!/bin/bash

source $CYGNUS_HOME/tools/funcs.bash    # source common functions

declare -a valid_list
declare -a valid_tests
declare MAKE_TARGET=all

# DEFAULTS
test_dir='.'
out_dir='test_run'

OPTION['-a']='value=bool,with=-d,help=run all testcases in this directory'
OPTION['-d']='value=string,metavar=dir,help=test case directory'
OPTION['-f']='value=bool,with=-d,without=-a,help=run unit tests only'
OPTION['-o']='value=string,metavar=dir,help=output directory of test run'
OPTION['-u']='value=bool,with=-d,without=-a,help=run functional tests only'
OPTION['--coverage']='value=bool,eval=preCoverage,help=run coverage tests'
OPTION['POS']='dest=test_list,count=0+'

preCoverage() {
    MAKE_TARGET='coverage'
    out_dir='test_cov'
    mkdir -p reports/cov
}

postCoverage() {
    lcov --capture --directory test_cov --no-external --output-file reports/cov/coverage.info --directory src --directory include
    genhtml reports/cov/coverage.info --output-directory reports/cov/lcov --demangle-cpp
}

validateTests() {
    if [[ ${VALUES["-a"]} ]]; then
        if [[ ${VALUES["test_list"]} ]]; then
            LOG I "-a is given, ignoring ${VALUES["test_list"]}"
        fi
        test -d $test_dir && cd $test_dir
        valid_tests=`find -type f -path "./unit*.cyt" -o -path "./func*.cyt" | sed 's|^./||'`
        cd - > /dev/null
        if [[ -z $valid_tests ]]; then
            LOG W "no testcases found in directory: $test_dir"
            EXIT
        fi
    elif [[ ${VALUES["-f"]} ]]; then
        if [[ ${VALUES["test_list"]} ]]; then
            LOG I "-f is given, ignoring ${VALUES["test_list"]}"
        fi
        test -d $test_dir && cd $test_dir
        valid_tests=`find -type f -path "./func*.cyt" | sed 's|^./||'`
        cd - > /dev/null
        if [[ -z $valid_tests ]]; then
            LOG W "no testcases found in directory: $test_dir"
            EXIT
        fi
    elif [[ ${VALUES["-u"]} ]]; then
        if [[ ${VALUES["test_list"]} ]]; then
            LOG I "-u is given, ignoring ${VALUES["test_list"]}"
        fi
        test -d $test_dir && cd $test_dir
        valid_tests=`find -type f -path "./unit*.cyt" | sed 's|^./||'`
        cd - > /dev/null
        if [[ -z $valid_tests ]]; then
            LOG W "no testcases found in directory: $test_dir"
            EXIT
        fi
    else
        for test in ${VALUES["test_list"]}; do
            if [[ $test =~ unit.*\.cyt || $test =~ func.*\.cyt && -a $test_dir/$test ]]; then
                valid_tests+=" $test"
            else
                LOG W "[invalid testcase] $test"
                continue
            fi
        done
        if [[ -z $valid_tests ]]; then
          LOG E "testcases missing"
          EXIT
        fi
    fi
}

makeRunDir(){
    local testcase=$1
    local test_out=$out_dir/`dirname $testcase`
    rm -rf $test_out
    mkdir -p $test_out
    ln -rs $test_dir/`dirname $testcase`/* $test_out/
}

runFuncTest() {
    local testcase=$1
    local testcase_dir=`dirname $testcase`
    local run_log=$out_dir/$testcase_dir/unit_test.log

    echo "[RUN] $testcase"
    makeRunDir $testcase
    cd $out_dir/$testcase_dir
    ./runme
}

runUnitTest() {
    local testcase=$1
    local testcase_dir=`dirname $testcase`
    local run_log=$out_dir/$testcase_dir/unit_test.log
    #run_log_color=$out_dir/$testcase_dir/.run.log

    echo "[RUN] $testcase"
    
    makeRunDir $testcase
    {
        LOG I "Run directory created"
        if [[ ! -a $test_dir/$testcase_dir/Makefile ]]; then
            gen-make -d $out_dir/$testcase_dir -i $CYGNUS_HOME/include -i $CYGNUS_HOME/tests/utils/include test.cc
        fi
        if [[ $? -ne 0 ]]; then
            EXIT 1
        fi
        make --no-print-directory -C $out_dir/$testcase_dir $MAKE_TARGET 2>&1 | tee $out_dir/$testcase_dir/make.log
        #sed 's|\x1b\[[;0-9]*m\x1b\[K||g' $out_dir/$testcase_dir/make.log.color > $out_dir/$testcase_dir/make.log
        cd $out_dir/$testcase_dir
        ./test
        status=$?
    } > $run_log 2>&1
    #sed 's|\x1b\[[;0-9]*m\x1b\[K||g' $run_log_color > $run_log
    [[ $status -eq 0 ]] && echo " --PASS--" || echo " --FAIL-- "
    cd - > /dev/null
}

runTest() {
    if [[ $1 =~ 'func' ]]; then
        runFuncTest $1
    else
        runUnitTest $1
    fi
    echo ""
}

main() {
    parseCmdLine $@
    test_dir=${VALUES['-d']:-$test_dir}
    out_dir=${VALUES['-o']:-$out_dir} 
    echo test_dir: $test_dir
    echo out_dir : $out_dir

    test -d $test_dir || LOG E "directory \`$test_dir' does not exit"
    if [[ $test_out == $out_dir ]]; then
        LOG E "test directory and out directory cannot be same"
        EXIT
    fi
    validateTests

    for test in $valid_tests; do
        runTest $test
    done

    case $MAKE_TARGET in
        coverage)
            postCoverage
            ;;
    esac
    return 0
}

main $@

