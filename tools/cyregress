#!/bin/bash

source $CYGNUS_HOME/tools/funcs.bash    # source common functions

declare -a valid_list
declare -a valid_tests

# DEFAULTS
TEST_DIR='.'
declare OUT_DIR='test_run'
declare TEST_MODE=''
declare FUNC_COUNT=0
declare UNIT_COUNT=0

TEE() {
    echo "" > $1
    while IFS= read line; do
        echo "$line"
        echo "$line" | sed 's|\x1b\[[;0-9]*m\x1b\[K||g' >> $1
    done
}

OPTION['-a']='value:bool,with:-d,help:run all testcases in this directory'
OPTION['-d']='value:string,metavar:dir,help:test case directory'
OPTION['-f']='value:bool,with:-d,without:-a,help:run unit tests only'
OPTION['-o']='value:string,metavar:dir,help:output directory of test run'
OPTION['-r']='value:bool,help:reflog update'
OPTION['-u']='value:bool,with:-d,without:-a,help:run functional tests only'
OPTION['--coverage']='value:bool,eval:TEST_MODE=coverage,help:run coverage tests'
OPTION['--mem-check']='value:bool,eval:TEST_MODE=mem-check,help:run mem-check tests'
OPTION['--perf']='value:bool,eval:TEST_MODE=perf,help:run mem-check tests'
OPTION['--sanitize']='value:bool,eval:TEST_MODE=sanitize,help:run sanitization tests'
OPTION['POS']='dest:test_list,count:0+'

validateTests() {
    if [[ ${VALUES['-a']} || ${VALUES['-f']} || ${VALUES['-u']} ]]; then
        if [[ ${VALUES['-f']} ]]; then
            valid_tests=$(find $TEST_DIR -type f -path "*func*.cyt" | xargs realpath)
        elif [[ ${VALUES['-u']} ]]; then
            valid_tests=$(find $TEST_DIR -type f -path "*unit*.cyt" | xargs realpath)
        else
            valid_tests=$(find $TEST_DIR -type f -name "*.cyt" | xargs realpath)
        fi
    else
        for test in ${VALUES["test_list"]}; do
            abs_test=$(realpath $test)
            if [[ $abs_test =~ unit.*\.cyt || $abs_test =~ func.*\.cyt && -a $abs_test ]]; then
                valid_tests+=" $abs_test"
            else
                LOG W "[invalid testcase] $abs_test"
                continue
            fi
        done
    fi
    if [[ -z $valid_tests ]]; then
      LOG E "no valid testcases found"
      EXIT
    fi
}

makeRunDir(){
    local testcase_dir=$1
    local testcase=$2
    local test_out=$OUT_DIR/`dirname $testcase`
    rm -rf $test_out
    mkdir -p $test_out || return 1
    ln -rs $testcase_dir/`dirname $testcase`/* $test_out/ || return 1
}

runFuncTest() {
    {
    for i in ${!CASE[@]}; do
        echo "|CASE $((i+1))| $(echo ${CASE[$i]} | sed "s|$CYGNUS|cygnus|")"
        $tool ${CASE[$i]} | sed 's/.*/>   &/' || return 1
        echo
    done
    } 2>&1 > TESTLOG
}

runUnitTest() {
    gen-make -i $CYGNUS_HOME/include/base -i $CYGNUS_HOME/include/scanner -i $CYGNUS_HOME/src/base/tcc -i $CYGNUS_HOME/tests/utils/include -s $CYGNUS_HOME/src/base -s $CYGNUS_HOME/src/scanner -s $CYGNUS_HOME/tests/utils/src test.cc || return 1
    make --no-print-directory $TEST_MODE 2>&1 | TEE make.log || return 1
    $tool ./test 2>&1 > TESTLOG || return 1
}

runTest() {
    local test=$1
    declare -A DIFFS
    if [[ $test =~ func.*cyt ]]; then
        local testcase=$(echo $test | egrep -o "func.*cyt")
        local testcase_dir=${test%/$testcase}
        FUNC_COUNT=$((FUNC_COUNT + 1))
        makeRunDir $testcase_dir $testcase
        cd $OUT_DIR/`dirname $testcase`
        echo "|TESTCASE $((FUNC_COUNT + UNIT_COUNT))/$tc_cnt | $testcase"
        source `basename $1`
        runFuncTest $testcase || ret=1
    else
        local testcase=$(echo $test | egrep -o "unit.*cyt")
        local testcase_dir=${test%/$testcase}
        UNIT_COUNT=$((UNIT_COUNT + 1))
        makeRunDir $testcase_dir $testcase
        cd $OUT_DIR/`dirname $testcase`
        echo "|TESTCASE $((FUNC_COUNT + UNIT_COUNT))/$tc_cnt | $testcase"
        source `basename $1`
        runUnitTest $testcase || ret=1
    fi

    local status=1
    for ref in ${!DIFFS[@]}; do
        diff -N --color=always $ref ${DIFFS[$ref]}
        if [[ $? -ne 0 || $ret -eq 1 ]]; then
            status=0
            if [[ ${VALUES['-r']} ]]; then
                cp ${DIFFS[$ref]} $ref
                echo "$ref updated"
            fi
        fi
    done

    if [[ $status -eq 1 ]]; then
        echo "status: PASS"
    else
        echo "status: FAIL"
        fail_cnt=$((fail_cnt + 1))
    fi

    case $TEST_MODE in
        mem-check)
            if [[ $(egrep -c "ERROR SUMMARY: 0 errors" valgrind.out) -ne 1 ]]; then
                sed -nr -e 's/^=+[0-9]+=+ //' -e '/HEAP SUMMARY/,/LEAK SUMMARY/ p' valgrind.out | sed -e '/HEAP SUMMARY:\|LEAK SUMMARY:/,/^$/ d'  | \
                while IFS= read line; do
                    if [[ $line == "" ]]; then
                        checksum=$(echo $error | md5sum | egrep -o "[0-Z]+")
                        echo "CHECKSUM: $checksum" >> mem.err
                        echo -e "$error" >> mem.err
                        error=""
                        continue
                    fi
                    error="    ${line/#   /}\n$error"
                done
                echo "mem-error: $(egrep -c "CHECKSUM: " mem.err)"
            fi
            ;;
        perf)
            callgrind_annotate --threshold=100 callgrind.out | egrep "$CYGNUS_HOME/src/" | gen-perf > TESTPERF
            perf-diff REFPERF TESTPERF | tee perf.diff
            ;;
    esac
    cd - > /dev/null
}

main() {
    if [[ ! $0 =~ $CYGNUS_HOME ]]; then
        LOG E "$(basename $0) is not inside $CYGNUS_HOME"
        return 1
    fi

    mkdir -p logs
    parseCmdLine $@
    TEST_DIR=${VALUES['-d']:-$TEST_DIR}
    OUT_DIR=${VALUES['-o']:-$OUT_DIR} 
    echo "    TEST_DIR: $TEST_DIR"
    echo "    OUT_DIR: $OUT_DIR"
    {
    test -d $TEST_DIR || LOG E "directory \`$TEST_DIR' does not exit"
    if [[ $test_out == $OUT_DIR ]]; then
        LOG E "test directory and out directory cannot be same"
        EXIT
    fi
    validateTests

    tc_cnt=0
    for test in $valid_tests; do
        tc_cnt=$((tc_cnt + 1))
    done
    echo -e "\nGenerated Testcase: $tc_cnt"

    #############
    # Pre Run   #
    #############
    case $TEST_MODE in
        coverage)
            CYGNUS=$CYGNUS_HOME/build/bin/coverage/cygnus-coverage
            OUT_DIR="$OUT_DIR/coverage"
            mkdir -p reports/coverage
            ;;
        mem-check)
            CYGNUS=$CYGNUS_HOME/build/bin/memory/cygnus-memory
            OUT_DIR="$OUT_DIR/mem-check"
            mkdir -p reports/mem-check
            tool="valgrind --track-origins=yes --errors-for-leak-kinds=all --show-leak-kinds=all --leak-check=full --log-file=valgrind.out"
            ;;
        perf)
            CYGNUS=$CYGNUS_HOME/build/bin/perf/cygnus-perf
            OUT_DIR="$OUT_DIR/perf"
            mkdir -p reports/perf
            tool="valgrind --tool=callgrind --callgrind-out-file=callgrind.out"
            ;;
        sanitize)
            CYGNUS=$CYGNUS_HOME/build/bin/sanitize/cygnus-sanitize
            OUT_DIR="$OUT_DIR/sanitize"
            mkdir -p reports/sanitize
            ;;
        *)
            CYGNUS=$CYGNUS_HOME/build/bin/cygnus
            ;;
    esac

    if [[ ${VALUES['-a']} || ${VALUES['-f']} ]] && [[ ! -x $CYGNUS ]]; then
        LOG E "$CYGNUS does not exist"
        EXIT
    fi
    rm -rf reports/func reports/unit
    mkdir -p reports/func reports/unit
    export fail_cnt=0

    #############
    #    Run    #
    #############
    for test in $valid_tests; do
        ret=0
        echo
        runTest $test
    done
    echo -e "\nSummary:"
    echo "    RUN:  $tc_cnt"
    echo "    PASS: $((tc_cnt - fail_cnt))"
    echo "    FAIL: $fail_cnt"

    #############
    # Post Run  #
    #############
    case $TEST_MODE in
        coverage)
            if [[ $FUNC_COUNT -gt 0 ]]; then
                mkdir -p reports/coverage/func
                lcov --gcov-tool=gcov-7 -b src/base -c -d build/obj/coverage -d include --no-external -o reports/coverage/func/coverage.info -q 2> /dev/null
                genhtml reports/coverage/func/coverage.info --output-directory reports/coverage/func/html --demangle-cpp > reports/coverage/func/genhtml.log 2> /dev/null
                echo "Functional Coverage:"
                egrep -A 1 "  lines\.\.\.\.\.\.: " reports/coverage/func/genhtml.log
            fi
            if [[ $UNIT_COUNT -gt 0 ]]; then
                mkdir -p reports/coverage/unit
                lcov --gcov-tool=gcov-7 -b src/base -b src/scanner -c -d $OUT_DIR -d include --no-external -o reports/coverage/unit/coverage.info -q 2> /dev/null

                # Put missing files in coverage.info when all testcases in directory run
                if [[ ${VALUES['-a']} ]]; then
                    mkdir /tmp/cygnus_tmp -p
                    find include src -regex ".*\.cc\|.*\.h\|.*\.tcc" | egrep -v "main.cc|cymem.cc" | sort -u | xargs realpath > /tmp/cygnus_tmp/all_files
                    egrep "SF:" reports/coverage/unit/coverage.info  | sed 's/SF://' | sort -u > /tmp/cygnus_tmp/covered_files
                    comm -23 /tmp/cygnus_tmp/all_files /tmp/cygnus_tmp/covered_files > /tmp/cygnus_tmp/uncovered_files
                    {
                    for file in `cat /tmp/cygnus_tmp/uncovered_files`; do
                        echo "SF:$file"
                        cat -ns $file | sed -r -e 's/^[ ]+//' -e 's/\t/ /g' | egrep -v "^[0-9]+ $|[0-9]+ (/|#)|[0-9]+  \*" | egrep -o "^[0-9]+" | sed 's/.*/DA:&,0/'
                        echo "end_of_record"
                    done
                    } >> reports/coverage/unit/coverage.info
                fi

                # remove test.cc from coverage.info
                sed -i '/test.cc$/,/end_of_record/ d' reports/coverage/unit/coverage.info

                genhtml --ignore-errors source reports/coverage/unit/coverage.info --output-directory reports/coverage/unit/html --demangle-cpp | tee reports/coverage/unit/genhtml.log 2> /dev/null
            fi
            if [[ ${VALUES['-a']} ]]; then
                mkdir -p reports/coverage/comp
                lcov --gcov-tool=gcov-7 -b src/base -c -d build/obj/coverage -d $OUT_DIR -d include --no-external -o reports/coverage/comp/coverage.info -q 2> /dev/null

                # remove test.cc from coverage.info
                sed -i '/test.cc$/,/end_of_record/ d' reports/coverage/comp/coverage.info

                genhtml --ignore-errors source reports/coverage/comp/coverage.info --output-directory reports/coverage/comp/html --demangle-cpp | tee reports/coverage/comp/genhtml.log 2> /dev/null
            fi
            ;;
        mem-check)
            rm -rf reports/mem-check
            if [[ ${VALUES['-a']} || ${VALUES['-f']} ]]; then
                mkdir -p reports/mem-check/func
                find $OUT_DIR/func -name "mem.err" | xargs egrep -h "CHECKSUM" | sort -u | wc -l >> reports/mem-check/func/errors
            fi
            if [[ ${VALUES['-a']} || ${VALUES['-u']} ]]; then
                mkdir -p reports/mem-check/unit
                find $OUT_DIR/unit -name "mem.err" | xargs egrep -h "CHECKSUM" | sort -u | wc -l >> reports/mem-check/unit/errors
            fi
            echo "    Memory Errors: $(find $OUT_DIR/unit $OUT_DIR/func -name "mem.err" | xargs egrep -h "CHECKSUM" | sort -u | wc -l)"
            ;;
        perf)
            ;;
        *)
    esac
    } | TEE logs/cyregress${TEST_MODE:+-$TEST_MODE}.log
    return 0
}

main $@

