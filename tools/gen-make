#!/usr/bin/python3.7

import argparse
import os
import subprocess
import sys

######################## CLASS ########################
class IO:
    tag_id = {
                "C":"CMD",      # Command tag
                "E":"ERROR",    # Error tag
                "F":"FAIL",     # Fail tag
                "I":"INFO",     # Info tag
                "W":"WARN"      # Warning tag
            }

    @staticmethod
    def log(mode, msg):
        tag = IO.tag_id.get(mode)
        if(tag == None):
            raise Exception("unknown mode \`" + mode + "' specified")
        
        print("[%s] %s" %(tag, msg))

    @staticmethod
    def cmdOut(msg):
        for line in msg.split('\n'):
            print(" >  " + line)

    @staticmethod
    def fileAppend(fd, msg, line_end='\n'):
        print(msg, end=line_end, file=fd)

class Args:
    __parser = argparse.ArgumentParser()

    def __init__(self):
        self.__parser.add_argument("file", help="genrate Makefile for this file")
        self.__parser.add_argument("-d", dest="cDir", metavar="dir", default=".", help="alternate location of file if not current directory")
        self.__parser.add_argument("-i", dest="incDir", metavar="dir", action="append", required=True, help="path of include directory")

    def parse(self):
        return self.__parser.parse_args()


######################### FUNCTIONS ########################
def printMakefile(opt, target, h_deps, cc_deps):
    o_deps = []
    makefile = open("Makefile", "w")

    IO.fileAppend(makefile, "############# Configs #############")
    
    # Common rules
    IO.fileAppend(makefile, "CY_COMP = g++ -std=c++11 $(COMP_FLAGS) $(INC)\n\n" +  # tempo fix for c++11
            "INC := ", '')
    for i in opt.incDir:
        IO.fileAppend(makefile, " \\\n    -I " + i, '')
    IO.fileAppend(makefile,'\n')

    IO.fileAppend(makefile, "OBJ_DIR := " + os.path.relpath("obj", opt.cDir[opt.cDir.rfind("unit/"):]) + "\n\n" +
                            "############# Targets #############\n" +
                            "all: $(OBJ_DIR) " + target + "\n\n" +
                            "coverage: COMP_FLAGS += --coverage\n" +
                            "coverage: all\n\n" +
                            "mem-check: COMP_FLAGS += -g\n" +
                            "mem-check: all\n")
    
    # Target rules
    IO.fileAppend(makefile, target + ": ", '')
    for dep in cc_deps:
        ind = dep.find("/src")
        if(ind > 0):
            obj = "$(OBJ_DIR)" + dep[ind+4:].replace(".cc", ".o")
        else:
            obj = dep.replace(".cc", ".o")
        o_deps.append(obj)
        IO.fileAppend(makefile, obj, ' ')

    IO.fileAppend(makefile, "\n\t$(CY_COMP) -o $@ $^\n")

    for dep in o_deps:
        IO.fileAppend(makefile, dep + ": " + cc_deps.pop(0) + " " + h_deps.pop(0) + '\n' +
                                "\t$(CY_COMP) -c $< -o $@\n")

    IO.fileAppend(makefile, "$(OBJ_DIR):\n" +
                            "\tmkdir $@\n")

    # Clean target
    IO.fileAppend(makefile, "clean:\n\trm -rf ", '')
    for dep in o_deps:
        IO.fileAppend(makefile, dep, ' ')
    IO.fileAppend(makefile, target)


######################## MAIN ########################
def main():
    args = Args()
    opt = args.parse()
    h_deps = []
    cc_deps = []
    
    os.chdir(opt.cDir)
    
    t = []
    for path in opt.incDir:
        if not os.path.isabs(path):
            t.append(os.path.relpath(path, opt.cDir))
        else:
            t.append(path)
    opt.incDir = t

    # Run command
    cmd = ["g++", "-MM"]
    for i in opt.incDir:
        cmd.append("-I" + i)
    cmd.append(opt.file)
    IO.log("C", ' '.join(cmd))
    proc = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr = subprocess.STDOUT)
    stdout, stderr = proc.communicate()

    if(proc.returncode):
        IO.cmdOut(stdout.decode("utf-8"))
        IO.log("F", "command failed: " + ' '.join(cmd))
        return 1
    
    line = stdout.decode("utf-8").split(' ')
    target = line.pop(0).strip(".o:")
    cc_deps.append(line.pop(0)) # this file is test.cc
    h_deps.append(line.pop(0))  # this file is test.h
    
    for dep in line:
        dep = dep.strip('\n');
        if dep == "\\":
            continue
        h_deps.append(dep)
        cc_deps.append(dep.replace("include", "src").replace(".h", ".cc"))

    printMakefile(opt, target, h_deps, cc_deps)

if __name__ == "__main__":
    ret = main()
    sys.exit(ret)
