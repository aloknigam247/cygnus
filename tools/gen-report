#!/bin/bash

declare EXITCODE=0

adder() {
    local sum=0
    while [[ $1 ]]; do
        sum=$((sum+$1))
        shift
    done
    echo $sum
}

covReport() {
    local comp_cov_line=-1
    local comp_cov_func=-1
    local comp_log="reports/coverage/comp/genhtml.log"
    local func_cov_line=-1
    local func_cov_func=-1
    local func_log="reports/coverage/func/genhtml.log"
    local unit_cov_line=-1
    local unit_cov_func=-1
    local unit_log="reports/coverage/unit/genhtml.log"

    if [[ -f reports/coverage/comp/genhtml.log ]]; then 
        comp_cov_line=$(egrep 'lines......: ' $comp_log | sed 's/.*lines......: //')
        comp_cov_func=$(egrep 'functions..: ' $comp_log | sed 's/.*functions..: //')
    fi
    if [[ -f reports/coverage/func/genhtml.log ]]; then 
        func_cov_line=$(egrep 'lines......: ' $func_log | sed 's/.*lines......: //')
        func_cov_func=$(egrep 'functions..: ' $func_log | sed 's/.*functions..: //')
    fi
    if [[ -f reports/coverage/unit/genhtml.log ]]; then 
        unit_cov_line=$(egrep 'lines......: ' $unit_log | sed 's/.*lines......: //')
        unit_cov_func=$(egrep 'functions..: ' $unit_log | sed 's/.*functions..: //')
    fi
    if [[ ${comp_cov_line/\.*/} -lt 94 || ${comp_cov_func/\.*/} -lt 97  ]] ||
       [[ ${func_cov_line/\.*/} -lt 71 || ${func_cov_func/\.*/} -lt 82  ]] ||
       [[ ${unit_cov_line/\.*/} -lt 98 || ${unit_cov_func/\.*/} -lt 98 ]]; then
        EXITCODE=1
    fi
    
    echo "Coverage Report::"
    echo "    Complete Coverage:"
    echo "        Lines......: $comp_cov_line"
    echo "        Functions..: $comp_cov_func"
    echo
    echo "    Funtional Coverage:"
    echo "        Lines......: $func_cov_line"
    echo "        Functions..: $func_cov_func"
    echo
    echo "    Unit Coverage:"
    echo "        Lines......: $unit_cov_line"
    echo "        Functions..: $unit_cov_func"
    echo
}

docsReport() {
    local undoc_count=$(cat reports/docs/undoc | wc -l)
    local need_update=$(egrep -o "yes|no" reports/docs/status)

    if [[ $undoc_count -gt 0 || $need_update == 'yes' ]]; then
        EXITCODE=1
    fi

    echo "DOCS::"
    echo "    Needs Update: $need_update"
    echo "    Undocumented: $undoc_count"
    echo
}

lintReport() {
    local cppcheck_error=$(egrep 'linterror: ' reports/lint/cppcheck | egrep -v 'Cppcheck does not need standard library headers to get proper results' | wc -l)
    local tidy_error=$(egrep -c "warning: |error: " reports/lint/tidy)

    if [[ $cppcheck_error -gt 0 || $tidy_error -gt 0 ]]; then
        EXITCODE=1
    fi

    echo "Lint Report::"
    echo "    cppcheck: $cppcheck_error"
    echo "    clang-tidy: $tidy_error"
    echo
}

memReport() {
    local func_error=-1
    local f_file="reports/mem-check/func/errors"
    local unit_error=-1
    local u_file="reports/mem-check/unit/errors"

    test -f $f_file && func_error=$(cat $f_file)
    test -f $u_file && unit_error=$(cat $u_file)

    if [[ $func_error -ne 0 || $unit_error -ne 0 ]]; then
        EXITCODE=1
    fi

    echo "Memory Report::"
    echo "    Functional: $func_error"
    echo "    Unit: $unit_error"
    echo
}

perfReport() {
    local func_perf=$(find test_run/perf/func -name "testfail" | wc -l )
    local unit_perf=$(find test_run/perf/unit -name "testfail" | wc -l )

    echo "Performace Report::"
    if [[ $func_perf -eq 0 ]]; then
        echo "    Functional: PASS"
    else
        EXITCODE=1
        echo "    Functional: FAIL"
    fi
    if [[ $unit_perf -eq 0 ]]; then
        echo "    Unit: PASS"
    else
        EXITCODE=1
        echo "    Unit: FAIL"
    fi
    echo
}

releaseTestReport() {
    EXITCODE=1
    echo -n "Release Test "
    test -f logs/cyregress.log && sed -n '/Summary:/,+3 p' logs/cyregress.log || echo "Summary: Not Run"
    echo
}

sanitizationReport() {
    EXITCODE=1
    echo -n "Sanitization "
    test -f logs/cyregress-sanitize.log && sed -n '/Summary:/,+3 p' logs/cyregress-sanitize.log || echo "Summary: Not Run"
    echo
}

styleReport() {
    local errors=-1

    test -f reports/style.log && errors=$(egrep -c "error: " reports/style.log)
    if [[ $errors -gt 0 ]]; then
        EXITCODE=1
    fi

    echo "Style Report::"
    echo "    errors: $errors"
    echo

}

warnReport() {
    local report_dir="reports/compiler"
    local debug_warn=-1
    local debug_file="$report_dir/debug-errors"
    local release_warn=-1
    local release_file="$report_dir/release-errors"

    test -f $report_dir/debug-errors && debug_warn=$(egrep -c "warning: " $debug_file) 
    test -f $report_dir/release-errors && release_warn=$(egrep -c "warning: " $release_file)
    
    if [[ $debug_warn -ne 0 || $release_warn -ne 0 ]]; then
        EXITCODE=1
    fi
    echo "Compiler Warnings::"
    echo "    Debug: $debug_warn"
    echo "    Release: $release_warn"
    echo
}

main() {
    warnReport
    lintReport
    covReport
    releaseTestReport
    memReport
    #perfReport
    sanitizationReport
    styleReport
    docsReport
    exit $EXITCODE
}

main $@
